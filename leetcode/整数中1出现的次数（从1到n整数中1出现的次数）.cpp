/*
    思路： 数位计算，时间Olgn，空间O1
    统计某个位置上 1出现的次数。如34，1在十位上出现的次数是10次，10到19，1在个位上出现的次数是4次（1，11，21，31），因此34中1出现了14次。

    对于整数n，将这个整数分为三部分：当前位数字cur，更高位数字high，更低位数字low，如：对于n=21034，当位数是十位时，cur=3，high=210，low=4。
    我们从个位到最高位 依次计算每个位置出现1的次数：
    在计算时，会出现三种情况
    1）当前位的数字等于0时，例如n=21034，在百位上的数字cur=0，百位上是1的情况有：00100-00199，01100-01199，……，20100-20199。一共有21*100种情况，即high*100;
    2）当前位的数字等于1时，例如n=21034，在千位上的数字cur=1，千位上是1的情况有：01000-01999，11000-11999，21000-21034。一共有2*1000+（34+1）种情况，即high*1000+(low+1)。
    3）当前位的数字大于1时，例如n=21034，在十位上的数字cur=3，十位上是1的情况有：00010-00019，……，21010-21019。一共有(210+1)*10种情况，即(high+1)*10。
*/

/**
 * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可
 *
 * 
 * @param n int整型 
 * @return int整型
 */
int NumberOf1Between1AndN_Solution(int n) {
    // 统计从 1 到 n 中数字 1 出现的次数
    int cnt = 0; // 计数器，用于记录出现的次数
    for (int i = 1; i <= n; i *= 10) { // 遍历每一位，从个位开始
        int high = n / (i * 10); // 高位部分，表示 i 的高位数字
        int low = n % i; // 低位部分，表示 i 的低位数字
        int cur = (n / i) % 10; // 当前位数字，表示 i 的当前位数字
        
        if (cur == 0) {
            cnt += high * i; // 当前位为 0，只能由高位影响
        } else if (cur == 1) {
            cnt += high * i + low + 1; // 当前位为 1，由高位和低位共同影响
        } else {
            cnt += (high + 1) * i; // 当前位大于 1，增加高位的影响
        }
    }
    return cnt; // 返回数字 1 出现的总次数
}
