// 思路： 双指针快慢指针法，时间Ologn，空间O1
// 1. 根据题目思考，n的范围是int类型的范围，最大是2的31次方，约10的9次方，假设最大出现10个9，即9999999999
// 2. 那么这个数的各位平方和也只有810，也就是说所有数的第一次变化都不会超过810，二次变化则也在这个范围内
// 3. 所以所有的数最终一定都会在810以内产生循环，有的数最终循环到了1，有的数在其他循环中无限进行
// 4. 因此只需要判断是否会进入1循环即可
// 5. 采用快慢指针，快指针每次算两次，慢指针每次算一次，因为一定存在循环，所以最终一定会得到快慢指针相遇的情况
// 6. 此时有两种情况，一直为1，二者相遇都为1。或者在其他的循环中相遇，因此只需判断相遇时是否为1即可

class Solution {
public:
    int get(int x) {    //用于计算各位平方和
        int res = 0;
        while(x) {
            res += pow((x % 10), 2);
            x /= 10;
        }
        return res;
    }
    bool isHappy(int n) {
        int fast = get(n);  //快指针一次算两次
        int slow = n;       //慢指针一次算一次
        while(slow != fast) {   //二者只要不相等就继续算，因为一定有循环，则一定会相等
            fast = get(get(fast));
            slow = get(slow);
        }
        return fast == 1;   //最后看二者是否为1即可
    }
};