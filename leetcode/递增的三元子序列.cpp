/*
    思路： 贪心，时间On，空间O1
    1. 用一个长度为2的数组记录三元子序列的前两个数字
    2. 对于每个数字，判断它与前面数字的关系，总是给每个位置放上最小的数字
    3. 如果某个数字比前两个都大，而第二个一定比第一个大，那么存在
*/

class Solution {
public:
    bool increasingTriplet(vector<int>& nums) {
        vector<int> q(2, INT_MAX);
        for (auto& x : nums) {  // 遍历每个数字
            int k = 2;  // 从后往前判断
            while (k > 0 && q[k - 1] >= x) {    // 如果当前数字比k对应位置的数字小，那么k--，看看是否能插到更前面，这不影响当前这两个数字的大小关系
                -- k;
            }
            if (k == 2) {   // 如果k没有移动，说明这个数字比前面两个数字都大，而前面两个数字也是有序的，并且第二个数字一旦产生，说明q1和q2一定是递增且顺序的
                return true;    // 此时出现第三个更大的数字，则存在
            }
            q[k] = x;   // 否则的话更新当前k位置的值，它是该位置上更小的值
        }
        return false;
    }
};